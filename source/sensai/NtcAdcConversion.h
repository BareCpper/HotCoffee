#pragma once

#include <cstdint>
#include <algorithm>
#include <limits>
#include "Utility.h"

constexpr uint16_t ntcOhm = 10000.0f;
constexpr float ntcMaxTempohm = 383.6;
constexpr float ntcMinTempohm = 10000;
constexpr float ntcMaxTempC = 120;
constexpr float ntcMinTempC = 25;
constexpr float ntcohmTemp[] = {
  119.9999991
,116.6544727
,113.6135739
,110.8214575
,108.241916
,105.837876
,103.5855146
,101.457013
,99.46297874
,97.63991159
,95.91625953
,94.29112621
,92.74936024
,91.28423852
,89.88697445
,88.55750928
,87.28610483
,86.06730739
,84.90259488
,83.8010329
,82.74220483
,81.72317407
,80.74281436
,79.79633583
,78.88331705
,78.00013755
,77.15076821
,76.32716581
,75.52855374
,74.75268166
,73.99705299
,73.27042939
,72.56154668
,71.86853658
,71.19750874
,70.54509789
,69.9043754
,69.2851346
,68.67906834
,68.08424555
,67.50953641
,66.94057698
,66.391643
,65.84907974
,65.32237912
,64.80389517
,64.29837554
,63.80137597
,63.31664892
,62.83856199
,62.37298465
,61.91113735
,61.46431549
,61.01749363
,60.58870259
,60.16064624
,59.74336785
,59.33256431
,58.92494921
,58.53088688
,58.13682456
,57.75357703
,57.37608189
,56.99864507
,56.63672794
,56.27481081
,55.91657649
,55.569961
,55.22334552
,54.88183461
,54.54957236
,54.21731012
,53.88989818
,53.57165544
,53.2534127
,52.93789523
,52.63303052
,52.32816581
,52.0233011
,51.73042246
,51.43853573
,51.14664901
,50.86089909
,50.58134561
,50.30179213
,50.02223865
,49.75381722
,49.4863579
,49.21889858
,48.95348461
,48.69729056
,48.4410965
,48.18490245
,47.93181206
,47.68677135
,47.44173065
,47.19668994
,46.95375275
,46.71937261
,46.48499247
,46.25061233
,46.01623219
,45.79131982
,45.56711195
,45.34290407
,45.1186962
,44.89904969
,44.68453453
,44.47001937
,44.25550422
,44.04098906
,43.83411698
,43.62905028
,43.42398359
,43.2189169
,43.01385021
,42.81723123
,42.62122414
,42.42521704
,42.22920995
,42.03320286
,41.84431643
,41.65688221
,41.46944799
,41.28201377
,41.09457956
,40.91128985
,40.73222164
,40.55315343
,40.37408522
,40.19501701
,40.01594881
,39.84413364
,39.67302763
,39.50192162
,39.33081561
,39.1597096
,38.9891124
,38.82564571
,38.66217903
,38.49871234
,38.33524565
,38.17177897
,38.00831228
,37.85178417
,37.6956278
,37.53947142
,37.38331505
,37.22715867
,37.0710023
,36.91868442
,36.76956712
,36.62044982
,36.47133253
,36.32221523
,36.17309793
,36.02398063
,35.88053204
,35.73816977
,35.5958075
,35.45344524
,35.31108297
,35.1687207
,35.02635843
,34.88922345
,34.75327621
,34.61732897
,34.48138173
,34.34543448
,34.20948724
,34.07354
,33.94046847
,33.81078565
,33.68110283
,33.55142001
,33.42173718
,33.29205436
,33.16237154
,33.03268872
,32.90740025
,32.78359274
,32.65978524
,32.53597774
,32.41217024
,32.28836274
,32.16455524
,32.04074774
,31.92078897
,31.80271832
,31.68464768
,31.56657703
,31.44850638
,31.33043574
,31.21236509
,31.09429444
,30.97731067
,30.86463733
,30.751964
,30.63929067
,30.52661733
,30.413944
,30.30127067
,30.18859733
,30.075924
,29.96496724
,29.85755692
,29.75014659
,29.64273627
,29.53532595
,29.42791562
,29.3205053
,29.21309497
,29.10568465
,28.99835402
,28.89590424
,28.79345446
,28.69100468
,28.5885549
,28.48610511
,28.38365533
,28.28120555
,28.17875577
,28.07630599
,27.97507503
,27.87740146
,27.77972789
,27.68205433
,27.58438076
,27.48670719
,27.38903362
,27.29136005
,27.19368649
,27.09601292
,26.99841763
,26.90534812
,26.81227861
,26.7192091
,26.6261396
,26.53307009
,26.44000058
,26.34693107
,26.25386156
,26.16079205
,26.06772255
,25.97583959
,25.8871269
,25.79841421
,25.70970152
,25.62098883
,25.53227614
,25.44356345
,25.35485076
,25.26613807
,25.17742538
,25.08871269
,25
  };


template< 
    const uint16_t ntcOhm
  , const uint16_t adcMax = std::numeric_limits<decltype(adc)>::max()>
constexpr uint32_t adcToMilliohm(uint16_t adc) 
{
    // (adc*r2) / (adc - max)
    return (float(ntcOhm*1000) / (adcMax-adc)) * adc;
}
static_assert( floatNear( adcToMilliohm<>(3060)/1000.0F, 489.796F, 0.001) );

constexpr float adcToOhm(uint16_t adc) 
{
    // (adc*r2) / (adc - max)
    constexpr uint16_t adcMax = std::numeric_limits<decltype(adc)>::max();
    return (adc * ntcOhm) / float(adcMax - adc);
   // return adcToMilliohm(adc) / 1000.0F;
}
static_assert( floatNear( adcToOhm(3060), 489.796F, 0.001) );

constexpr float ohmToCelcius( float ohm )
{

  const uint16_t ntcohmTempCount = std::extent<decltype(ntcohmTemp)>();
  const float tempohmRange = (ntcMinTempohm-ntcMaxTempohm);
  const uint16_t tempIndex = std::min(std::max(ohm-ntcMaxTempohm,0.0F), tempohmRange) * (1.0f/tempohmRange) * (ntcohmTempCount-1);
  return ntcohmTemp[tempIndex];
}


static_assert( ohmToCelcius(0) == ntcMaxTempC );
static_assert( ohmToCelcius(10000000) == ntcMinTempC );
static_assert( floatNear(adcToCelcius(5000), 94.3, 0.1f ) );
static_assert( floatNear(adcToCelcius(25000), 36.4, 0.1f ) );

constexpr float milliohmToCelcius( uint32_t milliohm )
{
    return ohmToCelcius( milliohm / 1000.0f );
}

constexpr float adcToCelcius( uint16_t adc )
{
    return ohmToCelcius(adcToOhm(adc));
}
